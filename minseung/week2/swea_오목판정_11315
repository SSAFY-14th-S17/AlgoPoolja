package swea;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;

//힌트 봄
// 빙고 새로운 완전탐색방법
// 지금 코드의 문제점 - 대각선을 놓친다. (0,0에서 시작하는 대각선이 아니라 1,0에서 시작하는 대각선의 경우는 세고 있지 않음
// 그래서 완전탐색으로 가서 하나의 점을 찍은 다음 그 점을 기준으로 빙고가 완성되는지를 보는 게 중요함.

//델타 곱하기를 통해서 연속된 수가 사용되었는지 확인할 수 있구나

public class 오목판정_11315 {
	static char[][] arr;
	static int N;

	public static void main(String[] args) throws FileNotFoundException {

		System.setIn(new FileInputStream("src/input.txt"));

		Scanner sc = new Scanner(System.in);

		int T = sc.nextInt();

		for (int tc = 1; tc <= T; tc++) {
			N = sc.nextInt();

			arr = new char[N][N];
			// 일단 2차원 배열로 받고 검사할까?
			for (int i = 0; i < N; i++) {
				String str = sc.next();

				for (int j = 0; j < N; j++) {
					arr[i][j] = str.charAt(j);
				}

			}
			boolean bingo = false;

			outer: for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (arr[i][j] == 'o') {
						if (checkDirection(i, j, 0, 1)) {// 가로 체크
							bingo = true;
							break outer;
						}
						if (checkDirection(i, j, 1, 0)) {// 세로 체크
							bingo = true;
							break outer;
						}
						if (checkDirection(i, j, 1, 1)) {// 우하 대각선 체크
							bingo = true;
							break outer;
						}
						if (checkDirection(i, j, -1, 1)) {// 우상 대각선 체크
							bingo = true;
							break outer;
						}

					}//주석

				}
			}
			System.out.print("#" + tc  +" ");
			System.out.println(bingo ? "Yes" : "No"); //if문을 쓰는 것보다 삼항 연산자를 쓰는 게 더 낫다.
		}

	}

	private static boolean checkDirection(int x, int y, int dx, int dy) {
		for (int k = 0; k < 5; k++) {
			int nx = x + dx * k;
			int ny = y + dy * k;
			if (nx < 0 || nx >= N || ny < 0 || ny >= N)
				return false;
			if (arr[nx][ny] != 'o') return false;

		}
		return true;
	}
}
